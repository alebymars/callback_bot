<?

class bot_vk {

 const v = '5.0';
 const METHOD_URL = 'https://api.vk.com/method/';
 const v_bot = '1.0';

 function __construct($settings) {
  $this->settings = (object) $settings;
 }

 public function start() {
  global $settings, $body, $user_id;
  switch ($settings->data->type) {

   case 'confirmation': 
    echo $settings->confirmation_token; 
   break;

   case 'message_new':

    $get = $this->api('messages.get', [
     'count' => 1,
     'access_token' => $settings->token 
    ]);

    if($get->response[1]->read_state == 0) {

     $oot = $settings->data->object->attachments;
     $user_id = $settings->data->object->user_id;

     $body_mess = mb_strtolower($settings->data->object->body);
     $body = explode(' ', $body_mess);

     if($body[0] == '/commands' || $body[0] == '/cmd' || $body[0] == '/–∫–æ–º–∞–Ω–¥—ã') {
      $this->send_message("–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ ".$this->random(['‚Å£üíú‚Å£üî•', '‚Å£‚Å£üíô‚Å£üî•'])."\n/commands \n/music \n/fact \n/saved \n/utter \n/update \n/advice \n/wiki \n/help \n/news");
     }

     elseif($body[0] == '–º—É–∑—ã–∫–∞') {
      $this->send_message('', 'audio'.$this->random($settings->audio));
      $this->send_message('', '', 50);
     }

     elseif(($body[0] == '/regdate' || $body[0] == '/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è') and (!empty($body[1]))) {
      $this->send_message($this->foaf($body[1]));
     }

     elseif($body[0] == '/update' || $body[0] == '/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è' || $body[0] == '/upd') {
      $this->send_message("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç 21 –æ–∫—Ç—è–±—Ä—è ".$this->random(['‚Å£üíú‚Å£üî•', '‚Å£‚Å£üíô‚Å£üî•'])."\n\n 1. –ö–æ–º–∞–Ω–¥—ã —Å—Ç–∞–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: <</music>> –±—É–¥–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å —Ç–æ–∂–µ, —á—Ç–æ –∏ <</–º—É–∑—ã–∫–∞>> \n\n 2. –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ <</advice>> - –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤, –Ω–∞–≤–µ—Ä–Ω–æ–µ\n\n 3. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ <</wiki + –∑–∞–ø—Ä–æ—Å>> - –∫—Ä–∞—Ç–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞–≤–∞–µ–º–æ–≥–æ —Å–ª–æ–≤–∞");
      $this->send_message("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç 22 –æ–∫—Ç—è–±—Ä—è ".$this->random(['‚Å£üíú‚Å£üî•', '‚Å£‚Å£üíô‚Å£üî•'])."\n\n 1. –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ <</news>> - —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π –∏–∑ –Ø–Ω–¥–µ–∫—Å.–ù–æ–≤–æ—Å—Ç–∏");
     }

     elseif($body[0] == '/saved' || $body[0] == '/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∫–∞') {

      $scan = $this->api('photos.get', [
        'owner_id' => '-152318721',
        'album_id' => 'wall',
        'count' => 1,
        'offset' => rand(rand(1,50),1000),
        'access_token' => $settings->utoken
      ]);

      $id = $scan->response[0]->pid;
       
      $this->send_message($this->random(['‚Å£–û–∫–µ–π, –¥–µ—Ä–∂–∏ ‚Å£üíú‚Å£üî•', '‚Å£‚Å£–ù–∞–¥–µ—é—Å—å –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è ‚Å£‚Å£üíô‚Å£üî•']), 'photo-152318721_'.$id);
     }

     elseif($body[0] == '/utter' || $body[0] == '/–≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–µ') {
      $uttr = $this->curl('http://randstuff.ru/saying/');
      preg_match('/<td>(.*?)<span class="author">(.*?)<\/span><\/td>/is', $uttr, $match);
      $this->send_message($this->random(['‚Å£–û–∫–µ–π, –¥–µ—Ä–∂–∏ ‚Å£üíú‚Å£üî•', '‚Å£‚Å£–ù–∞–¥–µ—é—Å—å –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è ‚Å£‚Å£üíô‚Å£üî•'])."\n\n".$match[1]."\n".$match[2]);
     }

     elseif($body[0] == '/advice' || $body[0] == '/—Å–æ–≤–µ—Ç' ) {
      $advice = json_decode($this->curl('http://fucking-great-advice.ru/api/random'));
      $text = html_entity_decode($advice->text);
      if($body[1] == '1') $fr = preg_replace('–±–ª—è—Ç—å', '', $text);
      else $fr = $text;
      $this->send_message($this->random(['‚Å£–û–∫–µ–π, –¥–µ—Ä–∂–∏ ‚Å£üíú‚Å£üî•', '‚Å£‚Å£–ù–∞–¥–µ—é—Å—å –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è ‚Å£‚Å£üíô‚Å£üî•'])."\n\n".$fr);
     }

     elseif(($body[0] == '/wiki' || $body[0] == '/–≤–∏–∫–∏') and (!empty($body[1]))) {
      $this->send_message($this->wiki($body[1]));
     }

     elseif($body[0] == '/news' || $body[0] == '/–Ω–æ–≤–æ—Å—Ç–∏') {
      $this->send_message($this->random(['‚Å£–û–∫–µ–π, –¥–µ—Ä–∂–∏ ‚Å£üíú‚Å£üî•', '‚Å£‚Å£–ù–∞–¥–µ—é—Å—å –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è ‚Å£‚Å£üíô‚Å£üî•'])."\n\n".$this->news('1'));
     }

     elseif(($body[0] == '/voice' || $body[0] == '/–≥–æ–ª–æ—Å') and (!empty($body[1]))) {

      $get = $this->api('docs.getUploadServer', [
       'type' => 'audio_message',
       'group_id' => '44214',
       'access_token' => $settings->utoken
      ]);

      $name = rand(1000,9999).".mp3";
      $fr = str_replace("/voice", "", $body_mess);

      $url = "https://translate.google.com/translate_tts?ie=UTF-8&client=tw-ob&q=".str_replace(array(" "), array("+"), $fr)."&tl=ru";

      $this->send_message('–û–¥–Ω—É –º–∏–Ω—É—Ç–æ—á–∫—É, –∑–∞–π '.$this->random(['‚Å£üíú‚Å£üî•', '‚Å£‚Å£üíô‚Å£üî•']));
      sleep(2);

      $handle = curl_init($url);
      $downloadFile = fopen($name, "w");
      curl_setopt($handle, CURLOPT_FILE, $downloadFile);
      curl_setopt($handle, CURLOPT_FOLLOWLOCATION, true);
      curl_exec($handle);
      curl_close($handle);
      fclose($downloadFile);

      $json = json_decode($this->curl($get->response->upload_url, ['file' => new CURLFile($name)]));

      $save = $this->api('docs.save', [
       'access_token' => $settings->utoken, 
       'file' => $json->file
      ]);

      unlink($name);

      $this->send_message('', 'doc'.$save->response[0]->owner_id.'_'.$save->response[0]->did);
     
     }

     elseif(($body[0] == '/vinci' or $body[0] == '/–≤–∏–Ω—á–∏') and $oot[0]->type == 'photo') {
      if(($oot[0]->photo->width < 200 || $oot[0]->photo->height < 200) and $body[1] != 0) {
       $this->send_message('–¢–∞–∫, –¥–∞–≤–∞–π —Å—Ä–∞–∑—É –¥–æ–≥–æ–≤–æ—Ä–∏–º—Å—è –º–Ω–µ –Ω—É–∂–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –º–µ–Ω—å—à–µ 200 –Ω–∞ 200 –ø–∏–∫—Å–µ–ª–µ–π ‚ô•');
      } else {

       $this->send_message('–¢–∞–∫, –ø–æ—à–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞, –ø–æ–≥–æ–¥–∏ –º–∏–Ω—É—Ç–∫—É ‚ô•');
       sleep(4);
       $name = $oot[0]->photo->access_key.'.jpg';

       $this->download($oot[0]->photo->photo_604, $name);

       $test = json_decode($this->curl('http://vinci.camera/preload', ['file' => new CURLFile($name)]));

       if($test->preload) {

        $r = 'http://vinci.camera/process/'.$test->preload.'/'.$body[1].'';
        $this->download($r, $name);

        $get = $this->api('photos.getMessagesUploadServer', ['access_token' => $settings->token]);

        if($get->response) {
         $upload = json_decode($this->curl($get->response->upload_url, ['file' => new CURLFile($name)]));
         if($upload->hash) {
          $save = $this->api('photos.saveMessagesPhoto', [
           'hash' => $upload->hash,
           'photo' => $upload->photo, 
           'server' => $upload->server, 
           'access_token' => $settings->token
          ]);  

          $this->send_message($this->random(['‚Å£–û–∫–µ–π, –¥–µ—Ä–∂–∏ ‚Å£üíú‚Å£üî•', '‚Å£‚Å£–ù–∞–¥–µ—é—Å—å –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è ‚Å£‚Å£üíô‚Å£üî•']), 'photo'.$save->response[0]->owner_id.'_'.$save->response[0]->pid);
          unlink($name);
         }
        }

       }
      }
     }

     elseif($body[0] == '/help' || $body[0] == '/–ø–æ–º–æ—â—å') {
      $this->send_message("–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã –∏ –ø—Ä–∞–≤–∏–ª–æ—Å—å–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞ ".$this->random(['‚Å£üíú‚Å£üî•', '‚Å£‚Å£üíô‚Å£üî•'])."\n\n–ö–æ–º–∞–Ω–¥–∞ <</commands>> –∏–ª–∏ <</–∫–æ–º–∞–Ω–¥—ã>> - –≤—ã–≤–æ–¥—è—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã\n\n–ö–æ–º–∞–Ω–¥–∞ <</music>> –∏–ª–∏ <</–º—É–∑—ã–∫–∞>> - –≤—ã–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ª—É—á–∞–π–Ω—ã–π —Ç—Ä–µ–∫ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ <<–ù–æ–≤–∏–Ω–∫–∏>> –º—É–∑—ã–∫–∏ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ\n\n–ö–æ–º–∞–Ω–¥–∞ <</fact>> –∏–ª–∏ <</—Ñ–∞–∫—Ç>> - –≤—ã–≤–æ–¥–∏—Ç —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ç–∞—Ç—É –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞\n\n–æ–º–∞–Ω–¥–∞ <</saved>> –∏–ª–∏ <</—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∫–∞>> - –≤—ã–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–æ–ø-—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∫—É –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≥—Ä—É–ø–ø –í–ö–æ–Ω—Ç–∞–∫—Ç–µ\n\n–ö–æ–º–∞–Ω–¥–∞ <</utter>> –∏–ª–∏ <</–≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–µ>> - –≤—ã–≤–æ–¥–∏—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–µ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞\n\n–ö–æ–º–∞–Ω–¥–∞ <</update>> –∏–ª–∏ <</–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è>> - –≤—ã–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–æ—Ç–µ\n\n–ö–æ–º–∞–Ω–¥–∞ <</advice>> –∏–ª–∏ <</—Å–æ–≤–µ—Ç>> - –≤—ã–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ª—É—á–∞–π–Ω—ã–π —Å–æ–≤–µ—Ç\n\n–ö–æ–º–∞–Ω–¥–∞ <</wiki + –∑–∞–ø—Ä–æ—Å>> –∏–ª–∏ <</–≤–∏–∫–∏ + –∑–∞–ø—Ä–æ—Å>> - –∫—Ä–∞—Ç–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞–≤–∞–µ–º–æ–≥–æ —Å–ª–æ–≤–∞\n\n");
      $this->send_message("–ö–æ–º–∞–Ω–¥–∞ <</news>> –∏–ª–∏ <</–Ω–æ–≤–æ—Å—Ç–∏>> - –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π");
     }

     elseif($body[0] == '/fact' || $body[0] == '/—Ñ–∞–∫—Ç') {
      $fact = $this->curl('http://randstuff.ru/fact/');
      preg_match('/<td>(.*?)<\/td>/is', $fact, $match);
      $this->send_message($this->random(['‚Å£–û–∫–µ–π, –¥–µ—Ä–∂–∏ ‚Å£üíú‚Å£üî•', '‚Å£‚Å£–ù–∞–¥–µ—é—Å—å –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è ‚Å£‚Å£üíô‚Å£üî•'])."\n\n".$match[1]);
     } else {
      $this->send_message('', '', 69);
     }

    }

    echo('ok'); 
   break;

   case 'group_join':

    $info = $this->api('users.get', ['user_ids' => $settings->data->object->user_id]);

    $this->send_message($info->response[0]->first_name.', —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É '.$this->random(['‚Å£üíú‚Å£üî•', '‚Å£‚Å£üíô‚Å£üî•']));
   break;

   default: echo('ok');
  }
 }

 public function foaf($tid) {

  $t = $this->api('users.get', [
   'user_ids' => $tid, 
   'fields' => 'deactivated'
  ]);

  if($t->response[0]->deactivated != 'deleted' or $t->response[0]->deactivated != 'banned') {
   $id = $t->response[0]->uid;
   for($i = $id; $i <= (2+$id); $i++) {
    $p = file_get_contents('https://vk.com/foaf.php?id='.$i);
    $match = preg_match('/<ya:created dc:date="([\d]{4}-[\d]{2}-[\d]{2}T[\d]{2}:[\d]{2}:[\d]{2}\+[\d]{2}:[\d]{2})/i', $p, $matches);
    if($matches[1]) {
     $exp = explode("T", $matches[1]);
     $month = array('—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è', '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è');
     $time = str_replace('+03:00', ' ', $exp[1]);
     $date = date("d", strtotime($exp[0])).' '.$month[date("n", strtotime($exp[0]))-1].' '.date("Y", strtotime($exp[0]));
     return '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: '.$date.' –≤ '.substr($time, 0, -4).'<br>';
    } else {
     ++$i;
     continue;
    }
   }
  } else {
    return '–ù–µ —É–¥–∞–ª–æ—Å—å, –±–ª—è—Ç—å, –Ω—É –∫–∞–∫ —Ç–∞–∫-—Ç–æ(99!111';
  }
 }

 public function wiki($word) {
  $data = json_decode($this->curl('https://ru.wikipedia.org/w/api.php', [
   'action' => 'opensearch',
   'search' => $word,
   'prop' => 'info',
   'format' => 'json',
   'inprop' => 'url'
  ]));

  if($data[2][0] != null) {
    
   $short = $this->vkcc($data[3][0]);
   $short1 = $this->vkcc($data[3][1]);
   $short2 = $this->vkcc($data[3][2]);

   if (!preg_match("/–≠—Ç–æ —Å—Ç–∞—Ç—å—è –æ —Å–ª–æ–≤–µ/i", $data[2][0]) and (substr($data[2][0], -1) != ':')) {
    $text = $this->random(['‚Å£–û–∫–µ–π, –¥–µ—Ä–∂–∏ ‚Å£üíú‚Å£üî•', '‚Å£‚Å£–ù–∞–¥–µ—é—Å—å –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è ‚Å£‚Å£üíô‚Å£üî•'])."\n\n ".$data[2][0]."\n\n–ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç—å—è - ".$this->expo($short->response->short_url);
   } else {
    $text = $this->random(['‚Å£–û–∫–µ–π, –¥–µ—Ä–∂–∏ ‚Å£üíú‚Å£üî•', '‚Å£‚Å£–ù–∞–¥–µ—é—Å—å –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è ‚Å£‚Å£üíô‚Å£üî•'])."\n\n–í –í–∏–∫–∏–ø–µ–¥–∏–∏ –∑–∞–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ—Å—Ç–µ–π. –ù–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç: \n\n".$this->expo($short->response->short_url)." \n".$this->expo($short1->response->short_url)." \n".$this->expo($short2->response->short_url);
   }
   return $text;
  } else {
   return "–ü–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å, –ø–æ–≤—Ç–æ—Ä–∏ –∑–∞–ø—Ä–æ—Å ".$this->random(['‚Å£üíú‚Å£üî•', '‚Å£‚Å£üíô‚Å£üî•']);
  }
 }

 public function random($array) {
  return $array[mt_rand(0, count($array)-1)];
 }

 public function vkcc($url) {
  global $settings;
  return $this->api('utils.getShortLink', [
  'access_token' => $settings->utoken,
  'url' => $url
  ]);
 }

 public function expo($url) {
  return preg_replace('!^https?://!i', '', $url);
 }

 public function download($url, $save) {
  $ch = curl_init($url);
  $fp = fopen($save, 'wb');
  curl_setopt($ch, CURLOPT_FILE, $fp);
  curl_setopt($ch, CURLOPT_HEADER, 0);
  curl_exec($ch);
  curl_close($ch);
  fclose($fp);
 }

 public function news($true) {
  if($true == 1) {
   $url = array('http://news.yandex.ru/index.rss','http://news.yandex.ru/world.rss','http://news.yandex.ru/sport.rss','http://news.yandex.ru/auto.rss','http://news.yandex.ru/science.rss','http://news.yandex.ru/internet.rss','http://news.yandex.ru/computers.rss'); 
   for($x = 0; $x <=6; $x++) {
    $rss = simplexml_load_file($url[$x]);
    $t .= ($x+1).". ".substr($rss->channel->title, 29).": ".$rss->channel->item->title."\n\n";
   }
   return $t;
  }
 }

 public function api($method, $param) {
  return json_decode($this->curl('https://api.vk.com/method/'.$method, $param));
 }

 public function send_message($message, $attach = null, $stick = null) {
  global $settings, $user_id;
  return $this->api('messages.send', [
   'message' => $message,
   'attachment' => $attach,
   'sticker_id' => $stick,
   'user_id' => $user_id,
   'access_token' => $settings->token,
   'v' => self::v
  ]);
 }

 public function curl($url, $post = null) {
  if(is_array($post)) $url .= '?'.http_build_query($post);
  $ch = curl_init($url);
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_HEADER, 0);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
  if($post) {
   curl_setopt($ch, CURLOPT_POST, 1); 
   curl_setopt($ch, CURLOPT_POSTFIELDS, $post); 
  }
  $response = curl_exec($ch);
  curl_close($ch);
  return $response;
 }

}

?>
